//#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;

uniform vec3 mtrlAmbient;
uniform vec3 mtrlSpecular;
uniform vec3 mtrlDiffuse;
uniform float mtrlSpecularPower;

uniform vec3 lightAmbient;
uniform vec3 lightSpecular;
uniform vec3 lightDiffuse;
uniform float lightFallOff;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	vec4 clip_pos =  MVP * vec4(vertexPosition_modelspace,1);
	Position_worldspace = clip_pos.xyz;
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	//clip_pos =  vec4(vertexPosition_modelspace,1);
	Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz;
	gl_Position = clip_pos;
	UV = vertexUV;
}

