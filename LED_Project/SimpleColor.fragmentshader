//#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

uniform sampler2D TexSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

uniform vec3 mtrlAmbient;
uniform vec3 mtrlSpecular;
uniform vec3 mtrlDiffuse;
uniform float mtrlSpecularPower;

uniform vec3 lightAmbient;
uniform vec3 lightSpecular;
uniform vec3 lightDiffuse;
uniform float lightFallOff;

void main()
{

	// Output color = red 
	//color = vec3(1,0,0);
	//	
	vec3 LightColor = vec3(0,1,0);
	float LightPower = 50.0f;
	vec3 MaterialDiffuseColor = texture2D(TexSampler,UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);
	float distance = length( LightPosition_worldspace - Position_worldspace );
	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	color = MaterialAmbientColor +
			MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
			MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
	
	//color = MaterialDiffuseColor;
}